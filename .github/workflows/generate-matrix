#!/usr/bin/env php
<?php

declare(strict_types=1);

set_error_handler(static function ($errno, $errstr, $errfile, $errline) {
    throw new RuntimeException("Error {$errno}: {$errstr}\nFile: {$errfile}\nLine: {$errline}");
}, -1);

const DEV_VERSIONS_SUFFIX = '.x';
const VERSIONID_LATEST = 'latest';

enum Workflow: string
{
    case Build = 'build.yml';
    case OngoingBranch = 'ongoing-branch.yml';
    case UpdateReadme = 'update-readme.yml';
}

function main(string $workflowID, string $outputFile): void
{
    $workflow = Workflow::tryFrom($workflowID) ?? throw new RuntimeException("Unrecognized workflow: '{$workflowID}'");
    if ($outputFile === '') {
        throw new RuntimeException('Failed to detect the GitHub Actions output file');
    }
    $versions = readDataFile(__DIR__ . '/../../data/versions.json');
    $serialized = $versions->serialize($workflow);
    $json = json_encode($serialized, JSON_PRETTY_PRINT | JSON_UNESCAPED_LINE_TERMINATORS | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE | JSON_THROW_ON_ERROR);
    if ($workflow === Workflow::UpdateReadme) {
        file_put_contents($outputFile, $json);
    } else {
        echo "Genetated matrix:\n{$json}\n";
        file_put_contents($outputFile, "generated-matrix<<EOF\n{$json}\nEOF\n", FILE_APPEND);
    }    
}

function readDataFile(string $jsonFilePath): Versions
{
    if (!is_file($jsonFilePath)) {
        throw new RuntimeException("Unable to find the file '{$jsonFilePath}'");
    }
    if (!is_readable($jsonFilePath)) {
        throw new RuntimeException("The file '{$jsonFilePath}' is not readable");
    }
    $json = file_get_contents($jsonFilePath);
    if ($json === false) {
        throw new RuntimeException("Failed to read the file '{$jsonFilePath}'");
    }
    try {
        $data = json_decode($json, true, 512, JSON_THROW_ON_ERROR);
    } catch (JsonException $x) {
        throw new RuntimeException("Failed to decode the contents of the file '{$jsonFilePath}':\n{$x->getMessage()}");
    }
    if (!is_array($data)) {
        throw new RuntimeException("The file '{$jsonFilePath}' doesn't define an array");
    }
    try {
        return new Versions($data);
    } catch (RuntimeException $x) {
        throw new RuntimeException("The file '{$jsonFilePath}' contains invalid data:\n{$x->getMessage()}");
    }
}

class Versions
{
    /**
     * @var Version[]
     */
    private readonly array $list;

    public function __construct(array $data)
    {
        $list = [];
        foreach ($data as $version => $archiveUrl) {
            if (!is_string($version)) {
                throw new RuntimeException('Invalid key type: ' . gettype($version));
            }
            if (!is_string($archiveUrl)) {
                throw new RuntimeException('Invalid value type: ' . gettype($archiveUrl));
            }
            $list[] = new Version($version, $archiveUrl);
        }
        usort($list, static function (Version $a, Version $b): int {
            return version_compare($b->comparableVersion, $a->comparableVersion);
        });
        $this->list = $list;
    }

    public function serialize(Workflow $workflow): array
    {
        $result = [];
        $alreadySerializedVersions = [];
        foreach ($this->list as $version) {
            if ($workflow !== Workflow::OngoingBranch || $version->isDevVersion) {
                $version->serialize($result, $alreadySerializedVersions);
            }
        }
        return $result;
    }
}

readonly class Version
{
    public bool $isDevVersion;

    public string $comparableVersion;

    public int $majorVersion;

    public string $majorMinorVersion;

    public string $phpVersion;

    public string $composerVersion;

    public string $phpunitVersion;

    public string $blankStartingPoint;

    public string $fullStartingPoint;

    public bool $patchEnvironmentOnly;

    public function __construct(public string $version,  public string $archiveUrl)
    {
        $matches = null;
        if (str_ends_with($this->version, DEV_VERSIONS_SUFFIX)) {
            if (!preg_match('/(?<major>\d+)\.(?<minor>\d+)' . preg_quote(DEV_VERSIONS_SUFFIX, '/') . '$/', $this->version, $matches)) {
                throw new RuntimeException("Invalid development version: {$this->version}");
            }
            $this->isDevVersion = true;
            $this->comparableVersion = "{$matches['major']}.{$matches['minor']}.999";
        } else {
            if (!preg_match('/(?<major>5\.[\d+])\.(?<minor>\d+)\.(?<patch>\d+)$/', $this->version, $matches)) {
                if (!preg_match('/(?<major>\d+)\.(?<minor>\d+)\.(?<patch>\d+)$/', $this->version, $matches)) {
                    throw new RuntimeException("Invalid version: {$this->version}");
                }
            }
            $this->isDevVersion = false;
            $this->comparableVersion = $this->version;
        }
        $this->majorVersion = (int) $matches['major'];
        $this->majorMinorVersion = "{$matches['major']}.{$matches['minor']}";

        if (version_compare($this->majorMinorVersion, '9.2') >= 0) {
            $this->phpVersion = '8.2';
        } elseif ($this->majorVersion >= 9) {
            $this->phpVersion = '8.1';
        } elseif ($this->majorVersion >= 8) {
            $this->phpVersion = '7.4';
        } else {
            $this->phpVersion = '5.6';
        }

        if ($this->majorVersion >= 9) {
            $this->composerVersion = '2';
        } else {
            $this->composerVersion = '1';
        }

        if (str_ends_with($this->version, DEV_VERSIONS_SUFFIX)) {
            $this->phpunitVersion = 'ccm';
        } elseif ($this->majorVersion >= 9) {
            $this->phpunitVersion = '8';
        } else {
            $this->phpunitVersion = '4';
        }

        if (version_compare($this->majorMinorVersion, '9.2') >= 0) {
            $this->blankStartingPoint = 'atomik_blank';
        } else {
            $this->blankStartingPoint = 'elemental_blank';
        }

        if ($this->majorVersion >= 9) {
            $this->fullStartingPoint = 'atomik_full';
        } else {
            $this->fullStartingPoint = 'elemental_full';
        }

        if ($this->majorVersion >= 8 && version_compare($this->comparableVersion, '9.2.0') <= 0) {
            $this->patchEnvironmentOnly = true;
        } else {
            $this->patchEnvironmentOnly = false;
        }
    }

    public function serialize(array &$result, array &$alreadySerializedVersions): void
    {
        if ($this->isDevVersion) {
            $versions = [$this->version];
            foreach ([
                $this->majorMinorVersion . DEV_VERSIONS_SUFFIX,
                $this->majorVersion . DEV_VERSIONS_SUFFIX,
            ] as $v) {
                if (!in_array($v, $versions, true)) {
                    $versions[] = $v;
                }
            }
        } else {
            $versions = [$this->version, $this->majorMinorVersion, (string) $this->majorVersion];
        }
        $newVersions = array_values(array_diff($versions, $alreadySerializedVersions));
        if ($this->isDevVersion === false && !in_array(VERSIONID_LATEST, $alreadySerializedVersions, true)) {
            $newVersions[] = VERSIONID_LATEST;
        }
        $result[] = $this->serializeVersions($newVersions, false);
        $result[] = $this->serializeVersions($newVersions, true);
        $alreadySerializedVersions = [...$alreadySerializedVersions, ...$newVersions];
    }

    public function serializeForOngoingBranch(array &$result): void
    {
        $result[] = $this->serializeVersions([$this->version], false);
        $result[] = $this->serializeVersions([$this->version], true);
    }

    private function serializeVersions(array $versions, bool $full): array
    {
        if ($full) {
            $versions = array_map(
                static fn (string $version): string => "{$version}-full",
                $versions
            );
        }
        $result = [
            'php_version' => $this->phpVersion,
            'composer_version' => $this->composerVersion,
            'phpunit_version' => $this->phpunitVersion,
            'c5_archive' => $this->archiveUrl,
            'c5_startingpoint' => $full ? $this->fullStartingPoint : $this->blankStartingPoint,
            'patch_environment_only' => $this->patchEnvironmentOnly ? 'Y' : 'N',
            'image_tag' => array_shift($versions),
            'additional_tags' => implode(' ', $versions),
        ];
        if ($this->isDevVersion) {
            $result['repo_branch'] = $this->version;
        }

        return $result;
    }
}

try {
    main((string) ($argv[1] ?? ''), (string) ($argv[2] ?? ''));
    exit(0);
} catch (Throwable $x) {
    fwrite(STDERR, $x->getMessage() . "\n");
    exit(1);
}
