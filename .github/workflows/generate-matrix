#!/usr/bin/env php
<?php

declare(strict_types=1);

set_error_handler(static function ($errno, $errstr, $errfile, $errline) {
    throw new RuntimeException("Error {$errno}: {$errstr}\nFile: {$errfile}\nLine: {$errline}");
}, -1);

const VERSIONID_DEVELOP = 'develop';
const VERSIONID_LATEST = 'latest';

function main(string $outputFile): void
{
    if ($outputFile === '') {
        throw new RuntimeException('Failed to detect the GitHub Actions output file');
    }
    $versions = readDataFile(__DIR__ . '/../../data/versions.json');
    $serialized = $versions->serialize();
    $json = json_encode($serialized, JSON_PRETTY_PRINT | JSON_UNESCAPED_LINE_TERMINATORS | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE | JSON_THROW_ON_ERROR);
    echo "Genetated matrix:\n{$json}\n";
    file_put_contents($outputFile, "generated-matrix<<EOF\n{$json}\nEOF\n", FILE_APPEND);
}

function readDataFile(string $jsonFilePath): Versions
{
    if (!is_file($jsonFilePath)) {
        throw new RuntimeException("Unable to find the file '{$jsonFilePath}'");
    }
    if (!is_readable($jsonFilePath)) {
        throw new RuntimeException("The file '{$jsonFilePath}' is not readable");
    }
    $json = file_get_contents($jsonFilePath);
    if ($json === false) {
        throw new RuntimeException("Failed to read the file '{$jsonFilePath}'");
    }
    try {
        $data = json_decode($json, true, 512, JSON_THROW_ON_ERROR);
    } catch (JsonException $x) {
        throw new RuntimeException("Failed to decode the contents of the file '{$jsonFilePath}':\n{$x->getMessage()}");
    }
    if (!is_array($data)) {
        throw new RuntimeException("The file '{$jsonFilePath}' doesn't define an array");
    }
    try {
        return new Versions($data);
    } catch (RuntimeException $x) {
        throw new RuntimeException("The file '{$jsonFilePath}' contains invalid data:\n{$x->getMessage()}");
    }
}

class Versions
{
    /**
     * @var Version[]
     */
    private readonly array $list;

    public function __construct(array $data)
    {
        $list = [];
        foreach ($data as $version => $archiveUrl) {
            if (!is_string($version)) {
                throw new RuntimeException('Invalid key type: ' . gettype($version));
            }
            if (!is_string($archiveUrl)) {
                throw new RuntimeException('Invalid value type: ' . gettype($archiveUrl));
            }
            $list[] = new Version($version, $archiveUrl);
        }
        usort($list, static function (Version $a, Version $b): int {
            if ($a->versions === [VERSIONID_DEVELOP]) {
                return -1;
            }
            if ($b->versions === [VERSIONID_DEVELOP]) {
                return 1;
            }
            return version_compare($b->versions[0], $a->versions[0]);
        });
        $this->list = $list;
    }

    public function serialize(): array
    {
        $result = [];
        $alreadySerializedVersions = [];
        foreach ($this->list as $version) {
            $version->serialize($result, $alreadySerializedVersions);
        }
        return $result;
    }
}

readonly class Version
{
    /**
     * @var string[]
     */
    public array $versions;

    public string $phpVersion;

    public string $composerVersion;

    public string $phpunitVersion;

    public string $blankStartingPoint;

    public string $fullStartingPoint;

    public bool $patchEnvironmentOnly;

    public function __construct(string $version,  public string $archiveUrl)
    {
        if ($version === VERSIONID_DEVELOP) {
            $this->versions = [VERSIONID_DEVELOP];
        } else {
            if (!preg_match('/(?<major>5\.[\d+])\.(?<minor>\d+)\.(?<patch>\d+)$/', $version, $matches)) {
                if (!preg_match('/(?<major>\d+)\.(?<minor>\d+)\.(?<patch>\d+)$/', $version, $matches)) {
                    throw new RuntimeException("Invalid version: {$version}");
                }
            }
            $this->versions = [
                $version,
                "{$matches['major']}.{$matches['minor']}",
                $matches['major'],
            ];
        }
        if ($this->versions === [VERSIONID_DEVELOP] || version_compare($this->versions[0], '9.2') >= 0) {
            $this->phpVersion = '8.2';
        } elseif (version_compare($this->versions[0], '9') >= 0) {
            $this->phpVersion = '8.1';
        } elseif (version_compare($this->versions[0], '8') >= 0) {
            $this->phpVersion = '7.4';
        } else {
            $this->phpVersion = '5.6';
        }
        if ($this->versions === [VERSIONID_DEVELOP] || version_compare($this->versions[0], '9') >= 0) {
            $this->composerVersion = '2';
        } else {
            $this->composerVersion = '1';
        }
        if ($this->versions === [VERSIONID_DEVELOP]) {
            $this->phpunitVersion = 'ccm';
        } elseif (version_compare($this->versions[0], '9') >= 0) {
            $this->phpunitVersion = '8';
        } else {
            $this->phpunitVersion = '4';
        }
        if ($this->versions === [VERSIONID_DEVELOP] || version_compare($this->versions[0], '9.2') >= 0) {
            $this->blankStartingPoint = 'atomik_blank';
        } else {
            $this->blankStartingPoint = 'elemental_blank';
        }
        if ($this->versions === [VERSIONID_DEVELOP] || version_compare($this->versions[0], '9') >= 0) {
            $this->fullStartingPoint = 'atomik_full';
        } else {
            $this->fullStartingPoint = 'elemental_full';
        }
        if ($this->versions === [VERSIONID_DEVELOP]) {
            $this->patchEnvironmentOnly = false;
        } elseif (version_compare($this->versions[0], '8') >= 0 && version_compare($this->versions[0], '9.2.0') <= 0) {
            $this->patchEnvironmentOnly = true;
        } else {
            $this->patchEnvironmentOnly = false;
        }

    }

    public function serialize(array &$result, array &$alreadySerializedVersions): void
    {
        $newVersions = array_values(array_diff($this->versions, $alreadySerializedVersions));
        if ($this->versions !== [VERSIONID_DEVELOP] && !in_array(VERSIONID_LATEST, $alreadySerializedVersions, true)) {
            $newVersions[] = VERSIONID_LATEST;
        }
        $result[] = $this->serializeVersions($newVersions, false);
        $result[] = $this->serializeVersions($newVersions, true);
        $alreadySerializedVersions = [...$alreadySerializedVersions, ...$newVersions];
    }

    private function serializeVersions(array $versions, bool $full): array
    {
        if ($full) {
            $versions = array_map(
                static fn (string $version): string => "{$version}-full",
                $versions
            );
        }
        return [
            'php_version' => $this->phpVersion,
            'composer_version' => $this->composerVersion,
            'phpunit_version' => $this->phpunitVersion,
            'c5_archive' => $this->archiveUrl,
            'c5_startingpoint' => $full ? $this->fullStartingPoint : $this->blankStartingPoint,
            'patch_environment_only' => $this->patchEnvironmentOnly ? 'Y' : 'N',
            'image_tag' => array_shift($versions),
            'additional_tags' => implode(' ', $versions),
        ];
    }
}

try {
    main((string) ($argv[1] ?? ''));
    exit(0);
} catch (Throwable $x) {
    fwrite(STDERR, $x->getMessage() . "\n");
    exit(1);
}