#!/usr/bin/env php
<?php

declare(strict_types=1);

const DOWNLOADS_URLS = [
    'https://www.concretecms.org/download/archive' => 1,
    'https://documentation.concretecms.org/9-x/developers/security/ancient-release-archive' => 2,
];

const DEV_VERSIONS_SUFFIX = '.x';

set_error_handler(static function ($errno, $errstr, $errfile, $errline) {
    throw new RuntimeException("Error {$errno}: {$errstr}\nFile: {$errfile}\nLine: {$errline}");
}, -1);

function main(): void
{
    $dataFile = __DIR__ . '/../../data/versions.json';
    $localVersions = readDataFile($dataFile);
    $onlineVersions = [];
    foreach (DOWNLOADS_URLS as $downloadsUrl => $linkFormat) {
        $onlineVersions += extractOnlineVersions($downloadsUrl, $linkFormat);
    }
    uksort(
        $onlineVersions,
        static fn (string $a, string $b): int => version_compare($b, $a)
    );
    foreach ($onlineVersions as $version => $url) {
        if (isset($localVersions[$version])) {
            $localVersions[$version] = $url;
        }
    }
    $newOnlineVersions = filterOnlineVersions($onlineVersions, array_keys($localVersions));
    if ($newOnlineVersions === []) {
        echo 'No new online versions found';
        return;
    }
    echo "New versions detected:\n- " . implode("\n- ", array_keys($newOnlineVersions)) . "\n";
    $localVersions += $newOnlineVersions;
    uksort($localVersions, static function (string $a, string $b): int {
        if (str_ends_with($a, DEV_VERSIONS_SUFFIX)) {
            $a = substr($a, 0, -strlen(DEV_VERSIONS_SUFFIX)) . '.999';
        }
        if (str_ends_with($b, DEV_VERSIONS_SUFFIX)) {
            $b = substr($b, 0, -strlen(DEV_VERSIONS_SUFFIX)) . '.999';
        }
        return version_compare($a, $b);
    });
    $json = json_encode($localVersions, JSON_PRETTY_PRINT | JSON_UNESCAPED_LINE_TERMINATORS | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
    if (file_put_contents($dataFile, $json) === false) {
        throw new RuntimeException("Failed to write to file '{$dataFile}'");
    }
}

function readDataFile(string $jsonFilePath): array
{
    if (!is_file($jsonFilePath)) {
        throw new RuntimeException("Unable to find the file '{$jsonFilePath}'");
    }
    if (!is_readable($jsonFilePath)) {
        throw new RuntimeException("The file '{$jsonFilePath}' is not readable");
    }
    $json = file_get_contents($jsonFilePath);
    if ($json === false) {
        throw new RuntimeException("Failed to read the file '{$jsonFilePath}'");
    }
    try {
        $data = json_decode($json, true, 512, JSON_THROW_ON_ERROR);
    } catch (JsonException $x) {
        throw new RuntimeException("Failed to decode the contents of the file '{$jsonFilePath}':\n{$x->getMessage()}");
    }
    if (!is_array($data) || $data === []) {
        throw new RuntimeException("The file '{$jsonFilePath}' doesn't define an array");
    }

    return $data;
}

function fetchDoc(string $downloadsUrl): DOMDocument
{
    $context = stream_context_create([
        'https' => [
            'follow_location' => false,
            'max_redirects' => 0,
            'ignore_errors' => true,
        ],
    ]);
    $whyNot = '';
    $http_response_header = [];
    set_error_handler(
        static function ($errno, $errstr) use (&$whyNot) {
            if ($whyNot === '' && is_string($errstr)) {
                $whyNot = trim($errstr);
            }
        },
        -1
    );
    try {
        $html = file_get_contents($downloadsUrl, false, $context);
    } finally {
        restore_error_handler();
    }
    if ($html === false) {
        throw new RuntimeException("Error downloading from {$downloadsUrl}: " . ($whyNot ?: 'unknown error'));
    }
    $chunks = empty($http_response_header) ? [] : explode(' ', $http_response_header[0], 3);
    $statusCode = isset($chunks[1]) && is_numeric($chunks[1]) ? (int) $chunks[1] : null;
    if ($statusCode !== 200) {
        throw new RuntimeException("Error downloading from {$downloadsUrl}: unexpected status code ({$statusCode})" . (empty($http_response_header) ? '' : ("\nResponse headers:\n" . trim(implode("\n", $http_response_header)))));
    }
    $doc = new DOMDocument();
    set_error_handler(static function() {}, -1);
    try {
        $loaded = $doc->loadHTML($html, LIBXML_BIGLINES | LIBXML_NONET | LIBXML_NOWARNING);
    } finally {
        restore_error_handler();
    }
    if ($loaded === false) {
        throw new RuntimeException("Failed to load the HTML fetched from '{$downloadsUrl}'");
    }
    return $doc;
}

function extractOnlineVersions(string $downloadsUrl, int $linkFormat): array
{
    $doc = fetchDoc($downloadsUrl);
    $result = [];
    $xpath = new DOMXpath($doc);
    foreach ($xpath->query('/html/body//a') as $link) {
        $versionData = extractOnlineVersion($link, $downloadsUrl, $linkFormat);
        if ($versionData === null) {
            continue;
        }
        $result[$versionData[0]] = $versionData[1];
    }
    if ($result === []) {
        throw new RuntimeException("No versions found at {$downloadsUrl}");
    }
    return $result;
}

function extractMajorVersion(string $version): string
{
    $chunks = explode('.', $version);

    return $chunks[0] === '5' ? "{$chunks[0]}.{$chunks[1]}" : $chunks[0];
}

function extractOnlineVersion(DOMElement $link, string $downloadsUrl, int $linkFormat): ?array
{
    $linkUrl = (string) $link->getAttribute('href');
    if ($linkUrl === '' || $linkUrl[0] === '#') {
        return null;
    }
    $linkUrl = absolutizeUrl($downloadsUrl, $linkUrl);
    $linkTextContent = trim(preg_replace('/\s+/u', ' ', (string) $link->textContent));
    $matches = null;
    switch ($linkFormat) {
        case 1:
            if ($linkTextContent !== 'Download' || $link->parentNode === null || $link->parentNode->parentNode === null) {
                return null;
            }
            $parentTextContent = trim(preg_replace('/\s+/u', ' ', (string) $link->parentNode->parentNode->textContent));
            if (!preg_match('/^(?<version>(5\.)?\d+\.\d+\.\d+) /', $parentTextContent, $matches)) {
                return null;
            }
            return [$matches['version'], $linkUrl];
        case 2:
            if (!preg_match('/^(?<version>(5\.)?\d+\.\d+\.\d+)()$/', $linkTextContent, $matches)) {
                return null;
            }
            $parentTextContent = trim(preg_replace('/\s+/u', ' ', (string) $link->parentNode->textContent));
            if (strpos($parentTextContent, "{$matches['version']} ") !== 0) {
                return null;
            }
            return [$matches['version'], $linkUrl];
    }
    throw new RuntimeException("Unrecognized link format: {$linkFormat}");
}

function filterOnlineVersions(array $onlineVersions, array $localVersions): array
{
    $localMajorVersions = [];
    foreach ($localVersions as $version) {
        if (str_ends_with($version, DEV_VERSIONS_SUFFIX)) {
            continue;
        }
        $major = extractMajorVersion($version);
        if (!isset($localMajorVersions[$major]) || version_compare($version, $localMajorVersions[$major]) >= 0) {
            $localMajorVersions[$major] = $version;
        }
    }

    foreach (array_keys($onlineVersions) as $version) {
        if (!shouldKeepOnlineVersion($version, $localMajorVersions)) {
            unset($onlineVersions[$version]);
        }
    }
    $majorVersions = [];
    foreach (array_keys($onlineVersions) as $version) {
        $major = extractMajorVersion($version);
        if (!isset($majorVersions[$major]) || version_compare($version, $majorVersions[$major]) >= 0) {
            $majorVersions[$major] = $version;
        }
    }
    $result = [];
    foreach ($majorVersions as $version) {
        $result[$version] = $onlineVersions[$version];
    }

    return $result;
}

function shouldKeepOnlineVersion(string $version, array $localMajorVersions): bool
{
    $major = extractMajorVersion($version);
    $hasNewerMajorVersions = false;
    foreach (array_keys($localMajorVersions) as $localMajor) {
        if (version_compare($major, (string) $localMajor) >= 0) {
            $hasNewerMajorVersions = true;
            break;
        }
    }
    if ($hasNewerMajorVersions === false) {
        return false;
    }
    return !isset($localMajorVersions[$major]) || version_compare($version, $localMajorVersions[$major]) > 0;
}

function absolutizeUrl(string $parentUrl, string $url): string
{
    if ($url === '') {
        return '';
    }
    if (preg_match('_^\w+://_', $url)) {
        return $url;
    }
    $urlChunks = parse_url($url);
    $parentUrlChunks = parse_url($parentUrl);
    if ($parentUrlChunks === false || empty($parentUrlChunks['scheme']) || empty($parentUrlChunks['host'])) {
        throw new RuntimeException("{$parentUrl} is not an absolute URL");
    }
    if (substr($url, 0, 2) === '//') {
        return "{$parentUrlChunks['scheme']}:{$url}";
    }
    $result = "{$parentUrlChunks['scheme']}://{$parentUrlChunks['host']}";
    if (!empty($parentUrlChunks['port'])) {
        $result .= ":{$parentUrlChunks['port']}";
    }
    if ($url[0] === '/') {
        return $result . $url;
    }
    if ($url[0] === '#') {
        $p = strpos($parentUrl, '#');
        if ($p === false) {
            return $parentUrl . $url;
        }
        return substr($parentUrl, 0, $p) . $url;
    }
    if ($url[0] === '?') {
        $p1 = strpos($parentUrl, '#');
        $p2 = strpos($parentUrl, '?');
        if ($p1 === false && $p2 === false) {
            return $parentUrl . $url;
        }
        $p = min($p1 === false ? PHP_INT_MAX : $p1, $p2 === false ? PHP_INT_MAX : $p2);
        return substr($parentUrl, 0, $p) . $url;
    }
    $path = ($parentUrlChunks['path'] ?? '') ?: '/';
    if (substr($path, 0, -1) !== '/') {
        $path = dirname($path);
        if ($path === '') {
            $path = '/';
        }
    }
    return $result . $path . $url;
}

try {
    main();
    exit(0);
} catch (Throwable $x) {
    fwrite(STDERR, $x->getMessage() . "\n");
    exit(1);
}
