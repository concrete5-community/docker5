#!/usr/bin/env php
<?php

declare(strict_types=1);

const DOWNLOADS_URL = 'https://marketplace.concretecms.com/developer-downloads/';
const VERSIONID_DEVELOP = 'develop';

set_error_handler(static function ($errno, $errstr, $errfile, $errline) {
    throw new RuntimeException("Error {$errno}: {$errstr}\nFile: {$errfile}\nLine: {$errline}");
}, -1);

function main(): void
{
    $dataFile = __DIR__ . '/../../data/versions.json';
    $localVersions = readDataFile($dataFile);
    $doc = fetchDoc();
    $onlineVersions = extractOnlineVersions($doc);
    $newOnlineVersions = filterOnlineVersions($onlineVersions, array_keys($localVersions));
    if ($newOnlineVersions === []) {
        echo 'No new online versions found';
        return;
    }
    echo "New versions detected:\n- " . implode("\n- ", array_keys($newOnlineVersions)) . "\n";
    $localVersions += $newOnlineVersions;
    uksort($localVersions, static function (string $a, string $b): int {
        if ($b === VERSIONID_DEVELOP) {
            return -1;
        }
        if ($a === VERSIONID_DEVELOP) {
            return 1;
        }
        return version_compare($a, $b);
    });
    $json = json_encode($localVersions, JSON_PRETTY_PRINT | JSON_UNESCAPED_LINE_TERMINATORS | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
    if (file_put_contents($dataFile, $json) === false) {
        throw new RuntimeException("Failed to write to file '{$dataFile}'");
    }
}

function readDataFile(string $jsonFilePath): array
{
    if (!is_file($jsonFilePath)) {
        throw new RuntimeException("Unable to find the file '{$jsonFilePath}'");
    }
    if (!is_readable($jsonFilePath)) {
        throw new RuntimeException("The file '{$jsonFilePath}' is not readable");
    }
    $json = file_get_contents($jsonFilePath);
    if ($json === false) {
        throw new RuntimeException("Failed to read the file '{$jsonFilePath}'");
    }
    try {
        $data = json_decode($json, true, 512, JSON_THROW_ON_ERROR);
    } catch (JsonException $x) {
        throw new RuntimeException("Failed to decode the contents of the file '{$jsonFilePath}':\n{$x->getMessage()}");
    }
    if (!is_array($data) || $data === []) {
        throw new RuntimeException("The file '{$jsonFilePath}' doesn't define an array");
    }

    return $data;
}

function fetchDoc(): DOMDocument
{
    $html = file_get_contents(DOWNLOADS_URL);
    if ($html === false) {
        throw new RuntimeException("Failed to fetch from '" . DOWNLOADS_URL . "'");
    }
    $doc = new DOMDocument();
    set_error_handler(static function() {}, -1);
    try {
        $loaded = $doc->loadHTML($html, LIBXML_BIGLINES | LIBXML_NONET | LIBXML_NOWARNING);
    } finally {
        restore_error_handler();
    }
    if ($loaded === false) {
        throw new RuntimeException("Failed to load the HTML fetched from '" . DOWNLOADS_URL . "'");
    }
    return $doc;
}

function extractOnlineVersions(DOMDocument $doc): array
{
    $result = [];
    $xpath = new DOMXpath($doc);
    foreach ($xpath->query('/html/body//a') as $link) {
        $versionData = extractOnlineVersion($link);
        if ($versionData === null) {
            continue;
        }
        $result[$versionData[0]] = $versionData[1];
    }
    if ($result === []) {
        throw new RuntimeException('No versions found.');
    }
    uksort(
        $result,
        static fn (string $a, string $b): int => version_compare($b, $a)
    );
    return $result;
}

function extractMajorVersion(string $version): string
{
    $chunks = explode('.', $version);

    return $chunks[0] === '5' ? "{$chunks[0]}.{$chunks[1]}" : $chunks[0];
}

function extractOnlineVersion(DOMElement $link): ?array
{
    $linkContent = trim(preg_replace('/\s+/u', ' ', $link->textContent));
    if (strcasecmp($linkContent, 'Download') !== 0) {
        return null;
    }
    $url = (string) $link->getAttribute('href');
    if ($url === '' || $url[0] === '#') {
        return null;
    }
    if (strpos($url, '//') === 0) {
        $url = parse_url(DOWNLOADS_URL, PHP_URL_SCHEME) . ':' . $url;
    } elseif ($url[0] === '/') {
        $pageUrl = parse_url(DOWNLOADS_URL);
        $prefix = "{$pageUrl['scheme']}://{$pageUrl['host']}";
        if (!empty($prefix['port'])) {
            $prefix .= ":{$prefix['port']}";
        }
        $url = $prefix . $url;
    }
    $parentContent = trim(preg_replace('/\s+/u', ' ', $link->parentNode->textContent));
    if (!preg_match('/^(?<version>(5\.)?\d+\.\d+\.\d+) \(\d{1,2}-\d{1,2}-\d{4}\)( .)? Download$/i', $parentContent, $matches)) {
        return null;
    }
    return [$matches['version'], $url];
}

function filterOnlineVersions(array $onlineVersions, array $localVersions): array
{
    $localMajorVersions = [];
    foreach ($localVersions as $version) {
        if ($version === VERSIONID_DEVELOP) {
            continue;
        }
        $major = extractMajorVersion($version);
        if (!isset($localMajorVersions[$major]) || version_compare($version, $localMajorVersions[$major]) >= 0) {
            $localMajorVersions[$major] = $version;
        }
    }

    foreach (array_keys($onlineVersions) as $version) {
        if (!shouldKeepOnlineVersion($version, $localMajorVersions)) {
            unset($onlineVersions[$version]);
        }
    }
    $majorVersions = [];
    foreach ($onlineVersions as $version => $url) {
        $major = extractMajorVersion($version);
        if (!isset($majorVersions[$major]) || version_compare($version, $majorVersions[$major]) >= 0) {
            $majorVersions[$major] = $version;
        }
    }
    $result = [];
    foreach ($majorVersions as $version) {
        $result[$version] = $onlineVersions[$version];
    }

    return $result;
}

function shouldKeepOnlineVersion(string $version, array $localMajorVersions): bool
{
    $major = extractMajorVersion($version);
    $hasNewerMajorVersions = false;
    foreach (array_keys($localMajorVersions) as $localMajor) {
        if (version_compare($major, (string) $localMajor) >= 0) {
            $hasNewerMajorVersions = true;
            break;
        }
    }
    if ($hasNewerMajorVersions === false) {
        return false;
    }
    return !isset($localMajorVersions[$major]) || version_compare($version, $localMajorVersions[$major]) > 0;
}

try {
    main();
    exit(0);
} catch (Throwable $x) {
    fwrite(STDERR, $x->getMessage() . "\n");
    exit(1);
}
